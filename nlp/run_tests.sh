#!/bin/bash

# ===============================================
# Lanzador de tests de la plataforma NLP
# ===============================================

# Directorios
REPORTS_DIR="test_reports"
HISTORICO="$REPORTS_DIR/historico_tests.csv"

# Crear carpeta de reportes si no existe
mkdir -p "$REPORTS_DIR"

# Fecha para informe
FECHA=$(date +"%Y-%m-%d_%H-%M-%S")
ARCHIVO="$REPORTS_DIR/test_report_${FECHA}.txt"

echo ""
echo "=============================================="
echo "üöÄ Iniciando ejecuci√≥n de todos los tests..."
echo "Los resultados se guardar√°n en: $ARCHIVO"
echo "=============================================="
echo ""

# Variables de m√©tricas
TOTAL_TESTS=0
TESTS_OK=0
TESTS_FAIL=0

# Redirigir la salida completa al archivo de log
{
    echo "=============================================="
    echo "üìã Resultados de la ejecuci√≥n de tests"
    echo "Fecha y hora: $(date)"
    echo "=============================================="
    echo ""

    # Array de tests
    declare -a TESTS=(
        "tests.test_cleaner"
        "tests.test_processor"
        "tests.test_cache"
        "tests.test_emotion_model"
        "tests.test_security"
        "tests.test_response_save"
        "tests.test_dialog_manager"
        "tests.test_intent_detector"
        "tests.test_conversation_controller"
        "tests.test_conversation_state"
        "tests.test_conversation_simulation"
        "tests.test_score_manager"
        "tests.test_puntuacion"
        "tests.test_empathy_utils"
        "tests.test_conversacion_empatica"
    )

    # Descripciones paralelas
    declare -a DESCRIPCIONES=(
        "‚úîÔ∏è Limpieza de textos. Objetivo: eliminar ruido, s√≠mbolos o espacios duplicados. Ej: '¬°Hola!' ‚Üí 'hola'"
        "‚úîÔ∏è Procesamiento del mensaje. Normalizaci√≥n, tokenizaci√≥n y lematizaci√≥n del input."
        "‚úîÔ∏è Verificaci√≥n de funcionamiento de la cach√© (Redis). Comprobar que guarda y recupera."
        "‚úîÔ∏è Evaluaci√≥n del modelo de emociones (BERT). Se prueba si detecta emociones como 'feliz', 'triste', etc."
        "‚úîÔ∏è Detecci√≥n de lenguaje inapropiado. Ejemplo: 'odio' ‚Üí bloqueado"
        "‚úîÔ∏è Guarda en MongoDB un mensaje, la emoci√≥n detectada y la respuesta."
        "‚úîÔ∏è Coordinaci√≥n del flujo de conversaci√≥n. Prueba respuestas y transiciones entre estados."
        "‚úîÔ∏è Detecta la intenci√≥n del usuario. Ej: 'Gracias' ‚Üí intenci√≥n: 'agradecer'"
        "‚úîÔ∏è Controlador maestro de di√°logo. Dirige el flujo seg√∫n contexto y fase."
        "‚úîÔ∏è Gesti√≥n de estado conversacional en Redis (cargar, guardar, borrar)."
        "‚úîÔ∏è Simula una conversaci√≥n completa con el asistente, de principio a fin."
        "‚úîÔ∏è Gesti√≥n de puntuaci√≥n emocional. Asigna valores num√©ricos a cada respuesta."
        "‚úîÔ∏è Test de puntuaci√≥n acumulada. Verifica el total final generado."
        "‚úîÔ∏è Test de funciones de empat√≠a y aclaraci√≥n. Verifica si el sistema identifica respuestas ambiguas ('no s√©', 'quiz√°s') y genera respuestas emp√°ticas adaptadas. Ejemplo: 'no lo s√©' ‚Üí respuesta aclaratoria."
        "‚úîÔ∏è Simulaci√≥n completa de una conversaci√≥n real que incluye una respuesta ambigua del usuario. Se espera que el sistema interrumpa el flujo para aclarar la pregunta antes de continuar."
    )

    # Iterar sobre los tests
    for i in "${!TESTS[@]}"; do
        TEST="${TESTS[$i]}"
        DESCRIP="${DESCRIPCIONES[$i]}"

        echo "----------------------------------------------"
        echo "üîé Ejecutando: $TEST"
        echo "üß† Descripci√≥n: $DESCRIP"
        echo "----------------------------------------------"

        docker exec -i nlp_service python -m "$TEST"

        if [ $? -eq 0 ]; then
            echo "‚úÖ $TEST ejecutado correctamente."
            ((TESTS_OK++))
        else
            echo "‚ùå Error al ejecutar $TEST."
            ((TESTS_FAIL++))
        fi
        ((TOTAL_TESTS++))
        echo ""
    done

    echo "=============================================="
    echo "‚úÖ Todos los tests procesados."
    echo "=============================================="
} &> "$ARCHIVO"

# Guardar hist√≥rico dentro del contenedor
docker exec nlp_service bash -c "
    mkdir -p /app/test_reports &&
    if [ ! -f /app/test_reports/historico_tests.csv ]; then
        echo 'fecha,total_tests,tests_ok,tests_fail' > /app/test_reports/historico_tests.csv
    fi
    echo '$(date +"%Y-%m-%d %H:%M:%S"),$TOTAL_TESTS,$TESTS_OK,$TESTS_FAIL' >> /app/test_reports/historico_tests.csv
"

# Generar gr√°fica
echo ""
echo "----------------------------------------------"
echo "üìà Generando gr√°fica de evoluci√≥n de tests..."
echo "----------------------------------------------"
docker exec -i nlp_service python scripts/generar_grafica_tests.py

# Mensaje final
echo ""
echo "=============================================="
echo "‚úÖ Finalizado. Consulta:"
echo "   - Informe individual: $ARCHIVO"
echo "   - Hist√≥rico de tests: /app/test_reports/historico_tests.csv"
echo "   - Gr√°fica evoluci√≥n:  /app/test_reports/historico_tests.png"
echo "=============================================="
